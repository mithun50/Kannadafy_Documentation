{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kannadafy Documentation! \ud83c\udf1f","text":"<p>Kannadafy is where Python meets Kannada, blending the art of programming with the beauty of one of the world's most ancient languages. \ud83d\ude80</p> <p>This tool obfuscates Python scripts using Kannada characters, transforming your code into an unreadable masterpiece \u2014 unless you're one of the initiated! Whether you're a coder, linguist, or just love experimenting with code, Kannadafy brings a unique twist to programming. \ud83c\udfa8\u2728</p> <p>Let\u2019s dive in and make your Python scripts stand out like never before. \ud83d\udcbb\u2728</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>[Usage]<ul> <li>CLI</li> <li>Project_Uses</li> </ul> </li> <li>How It Works</li> <li>Contributing</li> <li>Disclaimer</li> <li>FAQ</li> <li>Contact</li> </ul>"},{"location":"cli/","title":"CLI Usage \ud83d\udcbb","text":"<p>Obfuscate a Python script directly from the command line: Run Kannadafy directly from the command line using: [Prefferable For Windows]</p> <pre><code>python -m Kannadafy [options]\n</code></pre> <p>[Prefferable For Linux]</p> <pre><code>Kannadafy [options]\n</code></pre>"},{"location":"cli/#advanced-options","title":"Advanced Options","text":"<ul> <li>Custom Words: Use <code>-w</code> or <code>--words</code> to specify custom Kannada words for obfuscation.</li> <li>Default Words: If no words are specified, Kannadafy uses its default set of Kannada letters.</li> </ul>"},{"location":"cli/#command-line-options","title":"Command-Line Options","text":"Option Description <code>-i</code> / <code>--input</code> Input Python file to obfuscate (e.g., <code>script.py</code>). <code>-o</code> / <code>--output</code> Output file for the obfuscated script (e.g., <code>obfuscated_script.py</code>). <code>-w</code> / <code>--words</code> Use Default Kannada words for obfuscation . <code>-v</code> / <code>--version</code> Display the version of Kannadafy. <pre><code>python -m Kannadafy -i your_script.py -o obfuscated_script.py\n</code></pre> <ul> <li>You can use for default words</li> </ul> <pre><code>python -m Kannadafy -i input.py -o output.py -w\n</code></pre>"},{"location":"contact/","title":"Contact Us \ud83d\udcec","text":""},{"location":"contact/#email","title":"Email","text":"<ul> <li>Mithun Gowda B: mithungowda.b7411@gmail.com</li> <li>Manvanth: appuka1431@gmail.com</li> </ul>"},{"location":"contact/#social","title":"Social","text":"<ul> <li>Instagram: @MithunGowda.B</li> <li>Instagram: @Manvanth</li> </ul>"},{"location":"contributing/","title":"Contributing to Kannadafy \ud83c\udf31","text":"<p>Kannadafy is an open-source project, and we\u2019d love to have you on board!</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes and write tests (if applicable).</li> <li>Submit a pull request.</li> </ol>"},{"location":"contributing/#for-any-questions-feel-free-to-open-an-issue","title":"For any questions, feel free to open an issue.","text":""},{"location":"disclaimer/","title":"Disclaimer","text":""},{"location":"disclaimer/#disclaimer","title":"Disclaimer \u26a0","text":"<p>Important Note: Kannadafy does not provide a reverse process. Once a Python script is obfuscated using Kannada letters, there is no built-in way to de-obfuscate or reverse the process back to the original source code.</p> <p>This tool is meant purely for fun, learning, and experimentation. If you need to keep a backup of your original code, please make sure to store it in a safe place before obfuscating it. \ud83d\ude04</p>"},{"location":"disclaimer/#the-authors-are-working-on-deobfuscation-process-it-will-be-roll-out-soon","title":"The Author`s are working on deobfuscation process. It will be roll out soon.....","text":""},{"location":"faq/","title":"Frequently Asked Questions \u2753","text":""},{"location":"faq/#why-use-kannada-for-obfuscation","title":"Why use Kannada for obfuscation?","text":"<p>Because Kannada is beautiful, unique, and makes your code stand out! \ud83c\udfa8</p>"},{"location":"faq/#can-i-deobfuscate-the-code","title":"Can I deobfuscate the code?","text":"<p>No. Kannadafy is one-way obfuscation. Author`s are working on deobfuscation and it will be roll out soon....</p>"},{"location":"faq/#is-kannadafy-safe-for-production-use","title":"Is Kannadafy safe for production use?","text":"<p>Kannadafy is designed for fun and experimentation. Always keep a backup of your original code.</p>"},{"location":"faq/#is-i-can-use-custom-words-for-obfuscation","title":"Is I can use custom Words for obfuscation?","text":"<p>No, This specific version 1.0.5. can support custom words but it is not have an ability to use in obfuscation If you give the custom words after<code>-w</code> arguement but code returns you the \"Unexpected Error: 1\".So the Author`s working on resolving that issue and implmented in our next version</p>"},{"location":"how_it_works/","title":"How Kannadafy Works \ud83d\udee0","text":""},{"location":"how_it_works/#encoding-characters","title":"Encoding Characters","text":""},{"location":"how_it_works/#each-character-in-your-python-script-is-mapped-to-a-unique-kannada-character","title":"Each character in your Python script is mapped to a unique Kannada character.","text":""},{"location":"how_it_works/#wrapping-with-exec","title":"Wrapping with exec()","text":""},{"location":"how_it_works/#to-ensure-the-obfuscated-script-remains-functional-its-wrapped-in-a-python-exec-statement","title":"To ensure the obfuscated script remains functional, it\u2019s wrapped in a Python <code>exec()</code> statement.","text":""},{"location":"how_it_works/#error-handling","title":"Error Handling","text":"<ol> <li>File Not Found:</li> <li> <p>If the <code>.py</code> extension is omitted in the input file, Kannadafy automatically checks for a file with the <code>.py</code> extension.</p> </li> <li> <p>Missing Output File Name:</p> </li> <li> <p>Kannadafy ensures that the output file has a <code>.py</code> extension.</p> </li> <li> <p>Invalid Characters in Alphabet/Words:</p> </li> <li>Kannadafy validates the input alphabet and words to ensure compatibility.</li> </ol>"},{"location":"how_it_works/#customization","title":"Customization","text":""},{"location":"how_it_works/#you-can-specify-custom-kannada-words-for-obfuscation-using-the-w-or-words-option","title":"You can specify custom Kannada words for obfuscation using the <code>-w</code> or <code>--words</code> option.","text":""},{"location":"how_it_works/#some-examples","title":"Some Examples","text":"<pre><code>#main.py\nprint(\"\u0ca8\u0cae\u0cb8\u0ccd\u0c95\u0cbe\u0cb0\")\n</code></pre> <ul> <li>And When I Obfuscate the <code>main.py</code> with default Kannada Letters</li> </ul> <pre><code>#obf_kan_lett_main.py\nexec(\"\".join(map(chr,[int(\"\".join(str({'\u0c85': 0,\n '\u0c85:': 14,\n '\u0c85\u0c82': 13,\n '\u0c86': 1,\n '\u0c87': 2,\n '\u0c88': 3,\n '\u0c89': 4,\n '\u0c8a': 5,\n '\u0c8b': 6,\n '\u0c8e': 7,\n '\u0c8f': 8,\n '\u0c90': 9,\n '\u0c92': 10,\n '\u0c93': 11,\n '\u0c94': 12,\n '\u0c95': 15,\n '\u0c96': 16,\n '\u0c97': 17,\n '\u0c98': 18,\n '\u0c99': 19,\n '\u0c9a': 20,\n '\u0c9b': 21,\n '\u0c9c': 22,\n '\u0c9d': 23,\n '\u0c9e': 24,\n '\u0c9f': 25,\n '\u0ca0': 26,\n '\u0ca1': 27,\n '\u0ca2': 28,\n '\u0ca3': 29,\n '\u0ca4': 30,\n '\u0ca5': 31,\n '\u0ca6': 32,\n '\u0ca7': 33,\n '\u0ca8': 34,\n '\u0caa': 35,\n '\u0cab': 36,\n '\u0cac': 37,\n '\u0cad': 38,\n '\u0cae': 39,\n '\u0caf': 40,\n '\u0cb0': 41,\n '\u0cb2': 42,\n '\u0cb3': 48,\n '\u0cb5': 43,\n '\u0cb6': 44,\n '\u0cb7': 45,\n '\u0cb8': 46,\n '\u0cb9': 47}[i]) for i in x.split())) for x in\n\"\u0c86 \u0c86 \u0c87  \u0c86 \u0c86 \u0c89  \u0c86 \u0c85 \u0c8a  \u0c86 \u0c86 \u0c85  \u0c86 \u0c86 \u0c8b  \u0c89 \u0c85  \u0c88 \u0c89  \u0c88 \u0c87 \u0c89 \u0c85  \u0c88 \u0c87 \u0c89 \u0c8b  \u0c88 \u0c87 \u0c8a \u0c8b\\\n  \u0c88 \u0c87 \u0c8e \u0c8e  \u0c88 \u0c87 \u0c87 \u0c86  \u0c88 \u0c87 \u0c8b \u0c87  \u0c88 \u0c87 \u0c89 \u0c8f  \u0c88 \u0c89  \u0c89 \u0c86  \u0c86 \u0c85\"\n.split(\"  \")])))\n</code></pre> <ul> <li>And When I Obfuscate the <code>main.py</code> with default Kannada Words.</li> </ul> <pre><code>#obf_kan_words_main.py\nexec(\"\".join(map(chr,[int(\"\".join(str({'\u0c85\u0caa\u0ccd\u0caa': 1,\n '\u0c85\u0cae\u0ccd\u0cae': 0,\n '\u0c95\u0ca8\u0cb8\u0cc1': 3,\n '\u0c97\u0ccc\u0ca4\u0cae\u0ccd.\u0c8e\u0c82\u0cb8\u0cbf': 14,\n '\u0c9c\u0cc0\u0cb5\u0ca8': 6,\n '\u0ca8\u0ca6\u0cbf': 4,\n '\u0ca8\u0cae\u0cb8\u0ccd\u0c95\u0cbe\u0cb0': 12,\n '\u0cac\u0cc6\u0cb3\u0c95\u0cc1': 8,\n '\u0cae\u0c97\u0cc1': 2,\n '\u0cae\u0cb3\u0cc6': 7,\n '\u0cae\u0cbf\u0ca5\u0cc1\u0ca8\u0ccd \u0c97\u0ccc\u0ca1.\u0cac\u0cbf': 13,\n '\u0cae\u0cc6\u0c9a\u0ccd\u0c9a\u0cc1\u0c97\u0cc6': 11,\n '\u0cb0\u0cbe\u0cb9\u0cc1\u0cb2\u0ccd.\u0cb5\u0cbf': 15,\n '\u0cb8\u0c82\u0cac\u0c82\u0ca7': 9,\n '\u0cb8\u0cae\u0caf': 5,\n '\u0cb9\u0cb8\u0cbf\u0cb0\u0cc1': 10}[i]) for i in x.split())) for x in\n\"\u0c85\u0caa\u0ccd\u0caa \u0c85\u0caa\u0ccd\u0caa \u0cae\u0c97\u0cc1  \u0c85\u0caa\u0ccd\u0caa \u0c85\u0caa\u0ccd\u0caa \u0ca8\u0ca6\u0cbf  \u0c85\u0caa\u0ccd\u0caa \u0c85\u0cae\u0ccd\u0cae \u0cb8\u0cae\u0caf  \u0c85\u0caa\u0ccd\u0caa \u0c85\u0caa\u0ccd\u0caa \u0c85\u0cae\u0ccd\u0cae  \u0c85\u0caa\u0ccd\u0caa \u0c85\u0caa\u0ccd\u0caa\\\n \u0c9c\u0cc0\u0cb5\u0ca8  \u0ca8\u0ca6\u0cbf \u0c85\u0cae\u0ccd\u0cae  \u0c95\u0ca8\u0cb8\u0cc1 \u0ca8\u0ca6\u0cbf  \u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0ca8\u0ca6\u0cbf \u0c85\u0cae\u0ccd\u0cae  \u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0ca8\u0ca6\u0cbf \u0c9c\u0cc0\u0cb5\u0ca8  \u0c95\u0ca8\u0cb8\u0cc1 \\\n\u0cae\u0c97\u0cc1 \u0cb8\u0cae\u0caf \u0c9c\u0cc0\u0cb5\u0ca8  \u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0cae\u0cb3\u0cc6 \u0cae\u0cb3\u0cc6  \u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0cae\u0c97\u0cc1 \u0c85\u0caa\u0ccd\u0caa  \u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0c9c\u0cc0\u0cb5\u0ca8 \u0cae\u0c97\u0cc1  \\\n\u0c95\u0ca8\u0cb8\u0cc1 \u0cae\u0c97\u0cc1 \u0ca8\u0ca6\u0cbf \u0cac\u0cc6\u0cb3\u0c95\u0cc1  \u0c95\u0ca8\u0cb8\u0cc1 \u0ca8\u0ca6\u0cbf  \u0ca8\u0ca6\u0cbf \u0c85\u0caa\u0ccd\u0caa  \u0c85\u0caa\u0ccd\u0caa \u0c85\u0cae\u0ccd\u0cae\"\n.split(\"  \")])))\n</code></pre>"},{"location":"how_it_works/#lets-we-consider-the-python-script-mainpy","title":"Let`s we Consider the Python Script \"main.py\"","text":""},{"location":"installation/","title":"Installation Guide \ud83d\udee0","text":""},{"location":"installation/#install-via-pypi","title":"\ud83d\ude80 Install via PyPI","text":"<p>Run the following command to install Kannadafy directly from PyPI:</p> <pre><code>pip install Kannadafy\n</code></pre>"},{"location":"installation/#install-from-source","title":"\ud83d\udee0 Install from Source","text":"<p>Want to explore the source or contribute to Kannadafy? Install it directly from GitHub:</p> <pre><code>git clone https://github.com/mithun50/Kannadafy.git\ncd Kannadafy\npip install .\n</code></pre>"},{"location":"python_api/","title":"Using Kannadafy in Your Python Code \ud83e\uddd1\u200d\ud83d\udcbb","text":"<ul> <li>Use Kannadafy programmatically in your code:</li> </ul> <pre><code>from Kannadafy import obfuscate, DEFAULT_ALPHABET, DEFAULT_WORDS\n\n# Example script content (from a file or string)\ninput_file = \"example.py\"\noutput_file = \"obfuscated_example.py\"\n\n# 1. Using default Kannada letters\nobfuscate(input_file, output_file, custom_alphabet=DEFAULT_ALPHABET)\n\n# 2. Using default Kannada words\nobfuscate(input_file, output_file, custom_alphabet=DEFAULT_WORDS)\n\n</code></pre>"}]}